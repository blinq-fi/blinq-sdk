syntax = "proto3";

package xplore;

service Aggregator {
    rpc AggregateCall(XploreRequest) returns (XploreResponse);
    rpc GetTransactionRecord(TransactionRecordRequest) returns (TransactionRecord);
}

message ChainToken {
    string chain_id = 1;
    string address = 2;
    optional bool is_native = 3;
}

message TransactionRecordRequest {
    string transaction_hash = 1;
}

// Transaction record for cross-chain operations
message TransactionRecord {
    string source_transaction_hash = 1;
    string destination_transaction_hash = 2;
    uint64 source_timestamp = 3;
    uint64 destination_timestamp = 4;
    string node = 5;
    string sender = 6;
    string amount_in = 7;
    ChainToken input_token = 8;
    ChainToken output_token = 9;
    string amount_out = 10;
    string recipient_address = 11;
    TransactionStatus status = 12;
}

// Status of the transaction
enum TransactionStatus {
    UNKNOWN = 0;
    PENDING = 1;
    COMPLETED = 2;
    FAILED = 3;
}

message SwapRequest {
    ChainToken input_token = 1;
    ChainToken output_token = 2;
    string amount_in = 3;
    string amount_out_min = 4;
    uint64 slippage_tolerance_percent = 5;
    string recipient_address = 6;
    string sender_address = 7;
    bool exact_out = 8;
    int64 timeout_ms = 9;
    bool generate_deposit_address = 10;
}

// Define a common transaction data message
message TransactionData {
    optional EvmTransactionData evm_data = 1;
    optional SolanaTransactionData solana_data = 2;
    optional SuiTransactionData sui_data = 3;
}

// Update SwapResponse to use the common type
message SwapResponse {
    string uuid = 1;
    string amount_out = 2;
    ChainToken output_token = 3;
    repeated Step path_steps = 4;
    string amount_in = 7;
    string input_token = 8;
    string refund_address = 9;
    string chain_id = 10;
    string recipient_address = 11;
    uint32 partner_id = 12;
    string deposit_address = 13;
    TransactionData transaction_data = 14;  // Use the common wrapper
}


// EVM transaction data
message EvmTransactionData {
    string contract_address = 1;  // Moved from SwapResponse
    string calldata = 2;          // Moved from SwapResponse
    string value = 3;             // Optional value field for ETH transfers
}

// Solana transaction data
message SolanaTransactionData {
    repeated string tx_messages = 1;
    string blockhash = 2;
    uint64 last_valid_block_height = 3;
}

// Sui transaction data (placeholder for future implementation)
message SuiTransactionData {
    string from = 1;
    string to = 2;
    string data = 3;
    string value = 4;
}

message XploreRequest {
    ChainToken input_token = 1;
    ChainToken output_token = 2;
    string amount_in = 3;
    string amount_out_min = 4;
    uint64 slippage_tolerance_percent = 5;
    string recipient_address = 6;
    string sender_address = 7;
    bool exact_out = 8;
    int64 timeout_ms = 9;
    bool generate_deposit_address = 10;
}

message APISwapResponse {
    string uuid = 1;
    string amount_in = 2;
    string amount_out = 3;
    ChainToken output_token = 4;
    repeated Step path_steps = 5;
    string deposit_address = 6;
    TransactionData transaction_data = 7;
}

message Step {
    ChainToken input_token = 1;
    string amount_in = 2;
    string protocol_name = 3;
    ChainToken output_token = 4;
    string amount_out = 5;
}
    
// Update RouteStep to use the common type
message RouteStep {
    string node_id = 1;
    ChainToken input_token = 2;
    ChainToken output_token = 3;
    string amount_in = 4;
    string amount_out = 5;
    TransactionData transaction_data = 6;  // Use the common wrapper
}
  
message XploreResponse {
    string amount_in = 1;
    string amount_out = 2;
    double price_impact = 3;
    repeated RouteStep route = 4;
    double execution_time = 5;
    int64 gas_estimate = 6;
    string deposit_address = 7;
    string value = 8;
    TransactionData transaction_data = 9;
}
